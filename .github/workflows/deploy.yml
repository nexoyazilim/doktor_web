name: Deploy to GitHub Pages

on:
  push:
    branches: [ main, react_dondurme, yedek-branch ]
  workflow_dispatch:

# GitHub Pages için gerekli permissions
permissions:
  contents: read
  pages: write
  id-token: write

# Sadece bir job çalışmasına izin ver
concurrency:
  group: "pages"
  cancel-in-progress: false

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
          
      - name: Install dependencies
        run: npm ci
        
      - name: Build
        run: npm run build
        env:
          NODE_ENV: production
        
      - name: Copy public assets
        run: |
          # Public klasöründeki statik dosyaları dist'e kopyala
          cp -r public/assets dist/ 2>/dev/null || true
          cp public/404.html dist/404.html 2>/dev/null || true
          cp robots.txt dist/robots.txt 2>/dev/null || true
          cp sitemap.xml dist/sitemap.xml 2>/dev/null || true
          # Jekyll'i devre dışı bırak
          echo "" > dist/.nojekyll
          # CSS dosyalarının varlığını kontrol et
          ls -la dist/assets/css/vendor/ || echo "CSS vendor klasörü bulunamadı"
          # MIME type ayarları için .htaccess oluştur
          echo "AddType application/javascript .js" > dist/.htaccess
          echo "AddType text/css .css" >> dist/.htaccess
          echo "AddType application/json .json" >> dist/.htaccess
        
      - name: Setup Pages
        uses: actions/configure-pages@v4
        
      - name: Upload artifact
        uses: actions/upload-pages-artifact@v3
        with:
          path: ./dist

  deploy:
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4